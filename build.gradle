buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        flywayVersion = '4.0'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.flywaydb:flyway-gradle-plugin:${flywayVersion}")
        classpath('nu.studer:gradle-jooq-plugin:1.0.6')
        classpath('mysql:mysql-connector-java:5.0.8')
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0"
}

import org.apache.tools.ant.filters.ReplaceTokens

def profile = "dev"



apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'nu.studer.jooq'


war {
    baseName = 'healthmon'
    version = '0.0.1-SNAPSHOT'
}

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.flywaydb:flyway-core:${project.ext.flywayVersion}")
    compile('mysql:mysql-connector-java')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.4')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
        exclude "angular-app"
        filter ReplaceTokens, tokens: [
            "active_profile": profile
        ]
    }
    exclude "angular-app"
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.properties'
        exclude "angular-app"
    }
}

sourceSets {
    main {
        resources {
            exclude '**/angular-app/*'
            exclude 'angular-app'
        }
    }
}

task staging << {
    profile = "staging"
    println 'Using profile: "' + profile + '" for ' + project.getName()
}

task testing << {
    profile = "test"
    println 'Using profile: "' + profile + '" for ' + project.getName()
}

task production << {
    profile = "prod"
    println 'Using profile: "' + profile + '" for ' + project.getName()
}

task loadProps << {
    Properties props = new Properties()
    props.load(new FileInputStream("$project.rootDir/src/main/resources/application-" + "$profile" + ".properties"))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }
}

flyway {
    loadProps.execute()
    url = project.ext['spring.datasource.url']
    user = project.ext['spring.datasource.username']
    password = project.ext['spring.datasource.password']
}


jooq {
    loadProps.execute()
    healthmon(sourceSets.main) {
        jdbc {
            driver = project.ext['spring.datasource.driver-class-name']
            url = project.ext['spring.datasource.url']
            user = project.ext['spring.datasource.username']
            password = project.ext['spring.datasource.password']
            schema = 'healthmon'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'healthmon'
            }
            generate {
                relations = true
                deprecated = true
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'hr.fer.zpr.marinpetrunic.healthmon.database.generated'
                directory = "src/main/java"
            }
        }
    }
}

bootRun {
    systemProperties System.properties
}

tasks.build.dependsOn(loadProps)
tasks.compileJava.dependsOn(loadProps)
tasks.bootRun.dependsOn(loadProps)

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}
