/**
 * This class is generated by jOOQ
 */
package hr.fer.zpr.marinpetrunic.healthmon.database.generated.tables.records;


import hr.fer.zpr.marinpetrunic.healthmon.database.generated.tables.Activity;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActivityRecord extends UpdatableRecordImpl<ActivityRecord> implements Record3<Integer, String, Double> {

	private static final long serialVersionUID = 1933521896;

	/**
	 * Setter for <code>healthmon.activity.activity_id</code>.
	 */
	public ActivityRecord setActivityId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>healthmon.activity.activity_id</code>.
	 */
	public Integer getActivityId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>healthmon.activity.name</code>.
	 */
	public ActivityRecord setName(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>healthmon.activity.name</code>.
	 */
	public String getName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>healthmon.activity.average_calories_per_min</code>.
	 */
	public ActivityRecord setAverageCaloriesPerMin(Double value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>healthmon.activity.average_calories_per_min</code>.
	 */
	public Double getAverageCaloriesPerMin() {
		return (Double) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, Double> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, Double> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Activity.ACTIVITY.ACTIVITY_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Activity.ACTIVITY.NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Double> field3() {
		return Activity.ACTIVITY.AVERAGE_CALORIES_PER_MIN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getActivityId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Double value3() {
		return getAverageCaloriesPerMin();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ActivityRecord value1(Integer value) {
		setActivityId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ActivityRecord value2(String value) {
		setName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ActivityRecord value3(Double value) {
		setAverageCaloriesPerMin(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ActivityRecord values(Integer value1, String value2, Double value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ActivityRecord
	 */
	public ActivityRecord() {
		super(Activity.ACTIVITY);
	}

	/**
	 * Create a detached, initialised ActivityRecord
	 */
	public ActivityRecord(Integer activityId, String name, Double averageCaloriesPerMin) {
		super(Activity.ACTIVITY);

		setValue(0, activityId);
		setValue(1, name);
		setValue(2, averageCaloriesPerMin);
	}
}
